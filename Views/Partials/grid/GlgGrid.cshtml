@inherits UmbracoViewPage<dynamic>
@using Newtonsoft.Json.Linq
@using System.Web.Mvc;
@*
    Razor helpers located at the bottom of this file
*@
@if (Model != null && Model.sections != null)
{
    var oneColumn = ((System.Collections.ICollection)Model.sections).Count == 1;

    <div class="umb-grid">
        @if (oneColumn)
        {
            foreach (var section in Model.sections)
            {
                <div class="grid-section">
                    @foreach (var row in section.rows)
                    {
                        @renderRow(row, true);
                    }
                </div>
            }
        }
        else
        {
            @*<div class="container">*@
            <div class="row clearfix">
                @foreach (var s in Model.sections)
                {
                    <div class="grid-section">
                        <div class="col-md-@s.grid column">
                            @foreach (var row in s.rows)
                            {
                                @renderRow(row, false);
                            }
                        </div>
                    </div>
                }
            </div>
            @*</div>*@
        }
    </div>
}

@helper renderRow(dynamic row, bool singleColumn)
{
    <div @RenderElementAttributes(row)>
        @{
            bool fullBleed = IsFullBleed(row) || row.name == "1 Column - Full Width";
            if (singleColumn && !fullBleed)
            {
                <text><div class="container" /></text>
            }
        }
        <div class="row clearfix @GetClasses(row)">
            @foreach (var area in row.areas)
            {
                <div class="col-md-@area.grid column">
                    <div @RenderElementAttributes(area)>
                        @foreach (var control in area.controls)
                        {
                            if (control != null && control.editor != null && control.editor.view != null)
                            {
                                <text>@Html.Partial("grid/editors/base", (object)control)</text>
                            }
                        }
                    </div>
                </div>
            }
        </div>
        @if (singleColumn && !fullBleed)
        {
        @:
    }
    </div>
}

@functions {
    public static MvcHtmlString RenderElementAttributes(dynamic contentItem)
    {
        var attrs = new List<string>();
        JObject cfg = contentItem.config;

        if (cfg != null)
            foreach (JProperty property in cfg.Properties())
            {
                if (property.Name != "class")
                    attrs.Add(property.Name + "=\"" + property.Value.ToString() + "\"");
            }

        JObject style = contentItem.styles;

        if (style != null)
        {
            var cssVals = new List<string>();
            foreach (JProperty property in style.Properties())
                cssVals.Add(property.Name + ":" + property.Value.ToString() + ";");

            if (cssVals.Any())
                attrs.Add("style=\"" + string.Join(" ", cssVals) + "\"");
        }

        return new MvcHtmlString(string.Join(" ", attrs));
    }
    public static MvcHtmlString GetClasses(dynamic contentItem)
    {
        var attrs = new List<string>();
        JObject cfg = contentItem.config;

        if (cfg != null)
        {
            foreach (JProperty property in cfg.Properties())
            {
                if (property.Name == "class")
                    attrs.Add(property.Value.ToString());
            }


        }
        if (contentItem.name == "Article Right" || contentItem.name == "Article Left")
        {
            attrs.Add("blade blade--storytelling-image-copy");
        }
        else if (contentItem.name == "6 Column Image Grid")
        {
            attrs.Add("feature feature--backgroundImage");

        }
        return new MvcHtmlString(string.Join(" ", attrs));
    }
    public static bool GetAttributes(dynamic contentItem)
    {
        var attrs = new List<string>();
        JObject cfg = contentItem.config;
        if (cfg != null)
            foreach (JProperty property in cfg.Properties())
            {
                if (property.Name == "data-fullbleed" && property.Value.ToString() == "1")
                    return true;
            }
        return false;
    }
    public static bool IsFullBleed(dynamic contentItem)
    {
        var attrs = new List<string>();
        JObject cfg = contentItem.config;

        if (cfg != null)
            foreach (JProperty property in cfg.Properties())
            {
                if (property.Name == "data-fullbleed" && property.Value.ToString() == "1")
                    return true;
            }
        return false;
    }
}

